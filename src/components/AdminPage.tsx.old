// Remplacez le contenu de : src/components/AdminPage.tsx

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { BlogPost } from '../data/blogPosts';

const API_URL = '/api/posts';

const AdminPage: React.FC = () => {
    const [apiKey, setApiKey] = useState('');
    const [isLoggedIn, setIsLoggedIn] = useState(false);
    const [posts, setPosts] = useState<BlogPost[]>([]);
    const [currentPost, setCurrentPost] = useState<Partial<BlogPost> | null>(null);
    const [error, setError] = useState('');
    const [isSaving, setIsSaving] = useState(false);

    // Fonction pour récupérer les articles depuis le backend
    const fetchPosts = async () => {
        try {
            const response = await axios.get(API_URL);
            const sortedPosts = response.data.sort((a: BlogPost, b: BlogPost) => new Date(b.date).getTime() - new Date(a.date).getTime());
            setPosts(sortedPosts);
            setError('');
        } catch (err) {
            setError('Erreur lors de la récupération des articles.');
        }
    };

    // Vérifie au chargement si l'utilisateur est déjà connecté
    useEffect(() => {
        const storedApiKey = localStorage.getItem('elsyvia_api_key');
        if (storedApiKey) {
            setApiKey(storedApiKey);
            setIsLoggedIn(true);
        }
    }, []);

    // Une fois connecté, charge les articles
    useEffect(() => {
        if (isLoggedIn) {
            fetchPosts();
        }
    }, [isLoggedIn]);

    const handleLogin = () => {
        if (apiKey) {
            localStorage.setItem('elsyvia_api_key', apiKey);
            setIsLoggedIn(true);
        }
    };

    const handleSavePost = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!currentPost) return;
        setIsSaving(true);
        setError('');
        const headers = { 'x-api-key': apiKey };
        try {
            if (currentPost.id) {
                await axios.put(`${API_URL}/${currentPost.id}`, currentPost, { headers });
            } else {
                await axios.post(API_URL, currentPost, { headers });
            }
            setCurrentPost(null);
            fetchPosts();
        } catch (err: any) {
            setError(`Erreur de sauvegarde : ${err.response?.data?.message || err.message}`);
        } finally {
            setIsSaving(false);
        }
    };

    const handleDeletePost = async (postId: string) => {
        if (window.confirm("Êtes-vous sûr de vouloir supprimer cet article ? Cette action est irréversible.")) {
            try {
                const headers = { 'x-api-key': apiKey };
                await axios.delete(`${API_URL}/${postId}`, { headers });
                fetchPosts();
            } catch (err: any) {
                setError(`Erreur de suppression : ${err.response?.data?.message || err.message}`);
            }
        }
    };

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        if (currentPost) {
            const { name, value } = e.target;
            const isTags = name === 'tags';
            setCurrentPost({ ...currentPost, [name]: isTags ? value.split(',').map(tag => tag.trim()) : value });
        }
    };

    // --- AFFICHAGE ---

    if (!isLoggedIn) {
        return (
            <div className="min-h-screen flex items-center justify-center bg-gray-100 pt-20">
                <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-sm">
                    <h1 className="text-2xl font-bold mb-6 text-center">Accès Administration</h1>
                    <input type="password" value={apiKey} onChange={(e) => setApiKey(e.target.value)} placeholder="Entrez votre clé API secrète" className="w-full px-4 py-2 border rounded-lg mb-4" onKeyUp={(e) => e.key === 'Enter' && handleLogin()} />
                    <button onClick={handleLogin} className="w-full bg-teal-600 text-white py-2 rounded-lg hover:bg-teal-700">Entrer</button>
                </div>
            </div>
        );
    }
    
    if (currentPost) {
        return (
            <div className="container mx-auto px-4 py-12 pt-28">
                <h2 className="text-3xl font-bold mb-6">{currentPost.id ? 'Modifier' : 'Créer'} un article</h2>
                <form onSubmit={handleSavePost} className="bg-white p-6 rounded-lg shadow-md space-y-4">
                    <div>
                        <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-1">Titre</label>
                        <input id="title" name="title" value={currentPost.title || ''} onChange={handleInputChange} placeholder="Le titre principal de votre article" className="w-full p-2 border rounded" required />
                    </div>
                    <div>
                        <label htmlFor="excerpt" className="block text-sm font-medium text-gray-700 mb-1">Extrait (résumé)</label>
                        <textarea id="excerpt" name="excerpt" value={currentPost.excerpt || ''} onChange={handleInputChange} placeholder="Un court résumé qui apparaîtra dans la liste des articles" className="w-full p-2 border rounded" rows={3} required />
                    </div>
                    <div>
                        <label htmlFor="content" className="block text-sm font-medium text-gray-700 mb-1">Contenu (Markdown)</label>
                        <textarea id="content" name="content" value={currentPost.content || ''} onChange={handleInputChange} placeholder="Le contenu complet de l'article. Commencez la première ligne par '# Votre Titre'." className="w-full p-2 border rounded" rows={15} required />
                    </div>
                    <div className="grid md:grid-cols-3 gap-4">
                        <div>
                            <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-1">Catégorie</label>
                            <input id="category" name="category" value={currentPost.category || ''} onChange={handleInputChange} placeholder="Ex: Éthique, PME" className="w-full p-2 border rounded" required />
                        </div>
                        <div>
                            <label htmlFor="readTime" className="block text-sm font-medium text-gray-700 mb-1">Temps de lecture</label>
                            <input id="readTime" name="readTime" value={currentPost.readTime || ''} onChange={handleInputChange} placeholder="Ex: 5 min" className="w-full p-2 border rounded" required />
                        </div>
                        <div>
                            <label htmlFor="author" className="block text-sm font-medium text-gray-700 mb-1">Auteur</label>
                            <input id="author" name="author" value={currentPost.author || ''} onChange={handleInputChange} placeholder="Ex: Équipe ElsyvIA" className="w-full p-2 border rounded" required />
                        </div>
                    </div>
                    <div>
                        <label htmlFor="tags" className="block text-sm font-medium text-gray-700 mb-1">Tags</label>
                        <input id="tags" name="tags" value={currentPost.tags?.join(', ') || ''} onChange={handleInputChange} placeholder="Tags séparés par une virgule (ex: IA, PME, Outils)" className="w-full p-2 border rounded" />
                    </div>
                    {error && <p className="text-red-500 my-4">{error}</p>}
                    <div className="flex gap-4 pt-4">
                        <button type="submit" disabled={isSaving} className="bg-blue-600 text-white px-4 py-2 rounded disabled:bg-blue-300">{isSaving ? 'Sauvegarde en cours...' : 'Sauvegarder'}</button>
                        <button type="button" onClick={() => setCurrentPost(null)} className="bg-gray-300 px-4 py-2 rounded">Annuler</button>
                    </div>
                </form>
            </div>
        );
    }

    return (
        <div className="container mx-auto px-4 py-12 pt-28">
            <div className="flex justify-between items-center mb-6">
                <h1 className="text-4xl font-bold">Gestion du Blog</h1>
                <button onClick={() => setCurrentPost({ author: "Équipe ElsyvIA", featured: false })} className="bg-green-600 text-white px-4 py-2 rounded-lg">+ Créer un nouvel article</button>
            </div>
            {error && <p className="text-red-500 mb-4">{error}</p>}
            <div className="bg-white shadow-md rounded-lg overflow-x-auto">
                <table className="min-w-full">
                    <thead className="bg-gray-100">
                        <tr>
                            <th className="p-4 text-left font-semibold">Titre</th>
                            <th className="p-4 text-left font-semibold">Catégorie</th>
                            <th className="p-4 text-left font-semibold">Date</th>
                            <th className="p-4 text-left font-semibold">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {posts.map(post => (
                            <tr key={post.id} className="border-b hover:bg-gray-50">
                                <td className="p-4">{post.title}</td>
                                <td className="p-4">{post.category}</td>
                                <td className="p-4">{new Date(post.date).toLocaleDateString('fr-CA')}</td>
                                <td className="p-4 space-x-4">
                                    <button onClick={() => setCurrentPost(post)} className="text-blue-600 hover:underline">Modifier</button>
                                    <button onClick={() => handleDeletePost(post.id)} className="text-red-600 hover:underline">Supprimer</button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
};

export default AdminPage;
