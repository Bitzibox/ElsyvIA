import React, { useState, useEffect } from 'react';
import { Helmet } from 'react-helmet-async';
import { LogOut, Download, FileText, Search, Calculator, PlusCircle, Trash2, TrendingUp } from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import axios from 'axios';
import config from '/src/config';

const CORRECT_TOKEN = 'Elsyv1Acgenial2025!';

interface RoiTask {
    id: number;
    name: string;
    employees: string;
    hoursPerWeek: string;
    hourlyCost: string;
}

const ProspectDemoPage: React.FC = () => {
    const [token, setToken] = useState('');
    const [isLoggedIn, setIsLoggedIn] = useState(false);
    const [loginError, setLoginError] = useState('');
    
    const [userObjective, setUserObjective] = useState('');
    const [websiteUrl, setWebsiteUrl] = useState('');
    const [generatedPlan, setGeneratedPlan] = useState('');
    const [isGenerating, setIsGenerating] = useState(false);
    const [isExporting, setIsExporting] = useState(false);

    const [roiTasks, setRoiTasks] = useState<RoiTask[]>([
        { id: 1, name: 'Saisie de donn√©es et rapports', employees: '', hoursPerWeek: '', hourlyCost: '' }
    ]);
    const [scenarios, setScenarios] = useState({
        growth: '',
        costIncrease: ''
    });
    // ‚úÖ NOUVEAUT√â : √âtat pour le pourcentage d'automatisation personnalisable
    const [automationPercentage, setAutomationPercentage] = useState('80');
    const [auditSuggestion, setAuditSuggestion] = useState<string | null>(null);


    useEffect(() => {
        const storedToken = sessionStorage.getItem('elsyvia_demo_token');
        if (storedToken === CORRECT_TOKEN) {
            setToken(storedToken);
            setIsLoggedIn(true);
        }
    }, []);

    const handleLogin = (e: React.FormEvent) => {
        e.preventDefault();
        setLoginError('');
        if (token === CORRECT_TOKEN) {
            sessionStorage.setItem('elsyvia_demo_token', token);
            setIsLoggedIn(true);
        } else {
            setLoginError('Jeton d\'acc√®s incorrect.');
        }
    };

    const handleLogout = () => {
        sessionStorage.removeItem('elsyvia_demo_token');
        setIsLoggedIn(false);
        setToken('');
    };

    const callGeminiAPI = async (prompt: string) => {
        try {
            const GEMINI_API_KEY = config.geminiApiKey;
            
            if (!GEMINI_API_KEY || GEMINI_API_KEY === 'VOTRE_CLE_API_ICI') {
                throw new Error('Configuration API manquante');
            }

            const contents = [
                {
                    role: 'user',
                    parts: [{ text: prompt }]
                }
            ];

            console.log('üîç Envoi vers Gemini API...');

            const response = await fetch(
                `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${GEMINI_API_KEY}`,
                {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        contents: contents,
                        generationConfig: {
                            temperature: 0.7,
                            topK: 40,
                            topP: 0.95,
                            maxOutputTokens: 1024
                        }
                    })
                }
            );

            if (!response.ok) {
                const errorData = await response.text();
                console.error('‚ùå Erreur API Gemini:', response.status, errorData);
                
                if (response.status === 400) {
                    throw new Error('Format de requ√™te invalide');
                } else if (response.status === 403) {
                    throw new Error('Cl√© API invalide ou quota d√©pass√©');
                } else if (response.status === 429) {
                    throw new Error('Limite de taux atteinte');
                }
                
                throw new Error(`Erreur API: ${response.status}`);
            }

            const data = await response.json();
            console.log('‚úÖ R√©ponse re√ßue de l\'API');

            if (data.candidates && data.candidates[0] && data.candidates[0].content) {
                let cleanedText = data.candidates[0].content.parts[0].text;
                cleanedText = cleanedText.replace(/<br\s*\/?>/gi, '\n\n');
                cleanedText = cleanedText.replace(/<p>/gi, '\n\n');
                cleanedText = cleanedText.replace(/<\/p>/gi, '');
                cleanedText = cleanedText.replace(/<div>/gi, '\n\n');
                cleanedText = cleanedText.replace(/<\/div>/gi, '');
                return cleanedText;
            } else {
                console.error('‚ùå Structure de r√©ponse inattendue:', data);
                throw new Error('R√©ponse invalide de l\'API');
            }

        } catch (error) {
            console.error('‚ùå Erreur lors de l\'appel √† Gemini:', error);
            throw error;
        }
    };
    
    const validateBusinessQuery = (query: string): boolean => {
        const forbiddenKeywords = [
            'tour eiffel', 'hauteur', 'm√©t√©o', 'recette', 'histoire', 'g√©ographie',
            'math√©matiques', 'culture g√©n√©rale', 'd√©finition', 'qu\'est-ce que',
            'comment faire', 'capital', 'ville', 'pays', 'personnalit√©', 'c√©l√©brit√©',
            'sport', 'musique', 'film', 'livre', 'jeu', 'divertissement'
        ];
        
        const businessKeywords = [
            'chatbot', 'automatisation', 'ia', 'intelligence artificielle', 'workflow',
            'processus', 'digital', 'entreprise', 'business', 'client', 'vente',
            'marketing', 'gestion', 'optimisation', 'crm', 'erp', 'site web',
            'e-commerce', 'application', 'logiciel', 'syst√®me', 'donn√©es',
            'analyse', 'reporting', 'facture', 'devis', 'comptabilit√©'
        ];
        
        const queryLower = query.toLowerCase();
        
        const hasForbiddenWords = forbiddenKeywords.some(word => 
            queryLower.includes(word)
        );
        
        const hasBusinessWords = businessKeywords.some(word => 
            queryLower.includes(word)
        );
        
        return !hasForbiddenWords && (hasBusinessWords || queryLower.length > 50);
    };

    const generatePlanFromPrompt = async (prompt: string, objective: string) => {
        if (isGenerating || !prompt.trim()) return;

        if (objective.startsWith("G√©n√©rateur") && !validateBusinessQuery(prompt)) {
            setGeneratedPlan(`# üö´ Requ√™te Non √âligible

Cette demande semble sortir du cadre des solutions IA business d'Elsyvia.

## ‚úÖ Domaines d'Expertise Elsyvia
- Chatbots intelligents et assistants virtuels
- Automatisation des processus m√©tier
- Optimisation CRM et gestion client
- Solutions e-commerce et digital
- Workflows automatis√©s
- Analyse de donn√©es et reporting

## üí° Reformulez votre demande
Posez une question li√©e √† l'automatisation, l'IA conversationnelle, ou l'optimisation de vos processus d'entreprise.

**Exemples valides :**
- "Comment automatiser ma gestion client ?"
- "Cr√©er un chatbot pour mon site e-commerce"
- "Optimiser mes workflows de facturation"

---

**Elsyvia** - Votre partenaire IA pour transformer votre entreprise.`);
            return;
        }

        setIsGenerating(true);
        setGeneratedPlan('');
        setUserObjective(objective);
        
        try {
            console.log('üöÄ Lancement de la g√©n√©ration pour:', objective);
            const botResponse = await callGeminiAPI(prompt.trim());
            setGeneratedPlan(botResponse);

            if (objective.startsWith('Audit IA pour')) {
                const opportunities = ["Qualification des leads", "G√©n√©ration de devis", "Support client"];
                const randomOpportunity = opportunities[Math.floor(Math.random() * opportunities.length)];
                setAuditSuggestion(randomOpportunity);
            } else {
                setAuditSuggestion(null);
            }

            console.log('‚úÖ T√¢che termin√©e avec succ√®s');

        } catch (error) {
             console.error("‚ùå Erreur lors de la g√©n√©ration :", error);
             let errorMessage = "Une erreur technique est survenue.";
            
            if (error instanceof Error) {
                if (error.message.includes('Configuration API manquante')) {
                    errorMessage = "Configuration API manquante.\n\nVeuillez contacter l'administrateur.";
                } else if (error.message.includes('400')) {
                    errorMessage = "Format de requ√™te invalide.";
                } else if (error.message.includes('403')) {
                    errorMessage = "Probl√®me d'authentification API.\n\nV√©rifiez votre configuration.";
                } else if (error.message.includes('429')) {
                    errorMessage = "Limite de requ√™tes atteinte.\n\nVeuillez patienter un moment.";
                } else if (error.message.includes('Failed to fetch')) {
                    errorMessage = "Probl√®me de connexion r√©seau.";
                }
            }
            
            setGeneratedPlan(`# ‚ùå Erreur Technique

${errorMessage}

## üîÑ Solutions Sugg√©r√©es
- V√©rifiez votre connexion internet
- R√©essayez dans quelques instants
- Contactez le support si le probl√®me persiste

---

**Support Elsyvia** - Nous sommes l√† pour vous aider.`);
        } finally {
            setIsGenerating(false);
        }
    };
    
    const handleAuditWebsite = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!websiteUrl) return;

        let urlToAudit = websiteUrl.trim();
        if (!urlToAudit.startsWith('http://') && !urlToAudit.startsWith('https://')) {
            urlToAudit = 'https://' + urlToAudit;
        }

        try {
            new URL(urlToAudit);
        } catch (_) {
            setGeneratedPlan(`# üö´ URL Invalide\n\nL'adresse web fournie n'est pas valide.\n\n## ‚úÖ Format Attendu\n- \`www.mon-site.com\`\n- \`https://www.mon-entreprise.fr\`\n\nVeuillez corriger l'URL et r√©essayer.`);
            return;
        }

        const auditPrompt = `
CONTEXTE STRICT:
Tu es Elsy, une consultante IA experte pour Elsyvia. Ta mission est de r√©aliser un audit "flash" intelligent en analysant une URL pour d√©terminer le secteur d'activit√©, puis de g√©n√©rer des recommandations pertinentes.

URL √Ä ANALYSER: ${urlToAudit}

---
**MISSION :**

1.  **D√âTECTION INTELLIGENTE DU SECTEUR :** Analyse l'URL (${urlToAudit}). En te basant sur ta connaissance g√©n√©rale du web (marques, noms de domaine, etc.), identifie le secteur le plus pertinent dans la liste ci-dessous.

2.  **G√âN√âRATION DE L'AUDIT :** Une fois le secteur identifi√©, utilise le template d'opportunit√©s correspondant pour r√©diger l'audit final. Suis le format de sortie √† la lettre.

---
**LISTE DES SECTEURS & TEMPLATES D'OPPORTUNIT√âS :**

* **e-commerce:**
    * Opportunit√©s: R√©duction des abandons de panier, Personnalisation des recommandations produits, Support client 24/7.
* **tech-b2b:**
    * Opportunit√©s: Qualification automatique des leads techniques, G√©n√©ration automatis√©e de devis, Support technique intelligent.
* **medical:**
    * Opportunit√©s: Automatisation des prises de rendez-vous, Gestion intelligente des dossiers patients, Rappels automatis√©s.
* **restaurant:**
    * Opportunit√©s: Commandes en ligne optimis√©es, Gestion automatis√©e des r√©servations, Gestion automatis√©e des avis clients.
* **immobilier:**
    * Opportunit√©s: Qualification automatique des acheteurs/vendeurs, Prise de rendez-vous de visite 24/7, Assistant virtuel pour questions sur les biens.
* **services:**
    * Opportunit√©s: Automatisation de la qualification des prospects, G√©n√©ration de propositions commerciales, Optimisation de la planification.
* **automobile:**
    * Opportunit√©s: Pr√©-diagnostic automatis√© et devis, Planification intelligente des rendez-vous atelier, Rappels de maintenance.
* **tourisme:**
    * Opportunit√©s: Optimisation des r√©servations, Assistance multilingue automatis√©e, Personnalisation des offres voyageurs.
* **finance:**
    * Opportunit√©s: Simulateurs de pr√™t/assurance interactifs, Aide √† la d√©claration ou gestion de sinistre, Qualification de prospects pour produits financiers.
* **legal:**
    * Opportunit√©s: Prise de rendez-vous et pr√©-qualification des cas, Automatisation de documents juridiques, Chatbot pour questions fr√©quentes.
* **education:**
    * Opportunit√©s: Assistant d'orientation pour √©tudiants, Automatisation des processus d'inscription, Support administratif 24/7.
* **construction:**
    * Opportunit√©s: G√©n√©ration de devis instantan√©e, Planification optimis√©e des chantiers, Qualification des demandes de projet.
* **association:**
    * Opportunit√©s: Automatisation gestion adh√©sions/dons, Chatbot d'information sur les missions, Gestion des inscriptions b√©n√©voles.
* **general-b2b:**
    * Opportunit√©s: Automatisation du parcours client et CRM, Chatbot pour support et lead generation, Optimisation des processus internes.

---
**FORMAT DE SORTIE OBLIGATOIRE :**

# ‚ú® Audit Flash IA pour ${websiteUrl}

Cet audit identifie les opportunit√©s d'optimisation courantes pour votre secteur d'activit√© gr√¢ce aux solutions IA d'Elsyvia.

## üí° Opportunit√©s d'Optimisation Sectorielles

**[Ic√¥ne et Titre de l'Opportunit√© 1]**
**Opportunit√© identifi√©e :** [D√©crire le d√©fi typique du secteur en 1-2 phrases]
> **Solution Elsyvia :** [D√©crire le b√©n√©fice concret avec un gain sugg√©r√© (ex: "r√©duction de 40%...")]

**[Ic√¥ne et Titre de l'Opportunit√© 2]**
**Opportunit√© identifi√©e :** [D√©crire le d√©fi typique du secteur en 1-2 phrases]
> **Solution Elsyvia :** [D√©crire le b√©n√©fice concret avec un gain sugg√©r√©]

**[Ic√¥ne et Titre de l'Opportunit√© 3]**
**Opportunit√© identifi√©e :** [D√©crire le d√©fi typique du secteur en 1-2 phrases]
> **Solution Elsyvia :** [D√©crire le b√©n√©fice concret avec un gain sugg√©r√©]

---
## üöÄ Prochaine √âtape
Pour approfondir ces pistes et √©laborer un plan d'action chiffr√©, nous vous invitons √† contacter Elsyvia pour un diagnostic complet de vos besoins. Notre expertise en IA vous permettra de transformer vos d√©fis en opportunit√©s de croissance.
`;

        await generatePlanFromPrompt(auditPrompt, `Audit IA pour ${websiteUrl}`);
    };

    const handleGeneratePlan = async (e: React.FormEvent) => {
        e.preventDefault();
        const prompt = `
CONTEXTE STRICT:
Tu es Elsy, consultante IA sp√©cialis√©e EXCLUSIVEMENT dans les solutions business pour Elsyvia.

R√àGLES ABSOLUES:
- Tu NE r√©ponds QU'aux questions li√©es √† l'entreprise, l'automatisation, l'IA business.
- Si la question n'est PAS business : refuse poliment.

R√âPONSE DE REFUS (si hors-sujet):
"Je suis sp√©cialis√©e uniquement dans les solutions IA pour entreprises. Pouvez-vous reformuler votre question en lien avec l'automatisation, les chatbots, ou l'optimisation de processus m√©tier ?"

STYLE ET FORMAT (si question business valide):
- Adopte un style clair, a√©r√© et tr√®s structur√©.
- Utilise la syntaxe Markdown et les ic√¥nes pour la lisibilit√©.

FORMAT OBLIGATOIRE DU PLAN D'ACTION:
1.  Titre H1 : # ‚úÖ Plan d'Action ElsyvIA
2.  Introduction : Une phrase qui reformule le probl√®me du client.
3.  Un plan en 3 √©tapes. Pour chaque √©tape :
    - Un titre H2 avec un num√©ro et une ic√¥ne (ex: ## 1Ô∏è‚É£ √âtape 1 : Diagnostic).
    - Une description concise.
    - Une liste √† puces (-) d√©taillant 2-3 actions.
4.  S√©parateur : ---
5.  Titre H2 : ## üöÄ Votre Partenaire Strat√©gique
6.  Conclusion : Une phrase sur comment Elsyvia peut accompagner.

PROBL√âMATIQUE √Ä TRAITER:
${userObjective}

G√©n√®re le plan maintenant.
`;
        await generatePlanFromPrompt(prompt, `G√©n√©rateur de Plan`);
    };

    const handleSuggestionClick = async (suggestion: string) => {
        if (isGenerating) return;
        setUserObjective(suggestion);
        // On d√©clenche directement la g√©n√©ration
        const prompt = `
CONTEXTE STRICT:
Tu es Elsy, consultante IA sp√©cialis√©e EXCLUSIVEMENT dans les solutions business pour Elsyvia.

R√àGLES ABSOLUES:
- Tu NE r√©ponds QU'aux questions li√©es √† l'entreprise, l'automatisation, l'IA business.
- Si la question n'est PAS business : refuse poliment.

R√âPONSE DE REFUS (si hors-sujet):
"Je suis sp√©cialis√©e uniquement dans les solutions IA pour entreprises. Pouvez-vous reformuler votre question en lien avec l'automatisation, les chatbots, ou l'optimisation de processus m√©tier ?"

STYLE ET FORMAT (si question business valide):
- Adopte un style clair, a√©r√© et tr√®s structur√©.
- Utilise la syntaxe Markdown et les ic√¥nes pour la lisibilit√©.

FORMAT OBLIGATOIRE DU PLAN D'ACTION:
1.  Titre H1 : # ‚úÖ Plan d'Action ElsyvIA
2.  Introduction : Une phrase qui reformule le probl√®me du client.
3.  Un plan en 3 √©tapes. Pour chaque √©tape :
    - Un titre H2 avec un num√©ro et une ic√¥ne (ex: ## 1Ô∏è‚É£ √âtape 1 : Diagnostic).
    - Une description concise.
    - Une liste √† puces (-) d√©taillant 2-3 actions.
4.  S√©parateur : ---
5.  Titre H2 : ## üöÄ Votre Partenaire Strat√©gique
6.  Conclusion : Une phrase sur comment Elsyvia peut accompagner.

PROBL√âMATIQUE √Ä TRAITER:
${suggestion}

G√©n√®re le plan maintenant.
`;
        await generatePlanFromPrompt(prompt, `G√©n√©rateur de Plan`);
    };
    
    const handleRoiTaskChange = (id: number, field: keyof Omit<RoiTask, 'id'>, value: string) => {
        setRoiTasks(tasks => tasks.map(task => task.id === id ? { ...task, [field]: value } : task));
    };

    const addRoiTask = () => {
        setRoiTasks(tasks => [...tasks, { id: Date.now(), name: '', employees: '', hoursPerWeek: '', hourlyCost: '' }]);
    };
    
    const addSuggestedTask = () => {
        if (auditSuggestion) {
            setRoiTasks(tasks => [...tasks, { id: Date.now(), name: auditSuggestion, employees: '', hoursPerWeek: '', hourlyCost: '' }]);
            setAuditSuggestion(null); // Clear suggestion after adding
        }
    };

    const removeRoiTask = (id: number) => {
        setRoiTasks(tasks => tasks.filter(task => task.id !== id));
    };
    
    const handleScenarioChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setScenarios(prev => ({ ...prev, [name]: value }));
    };

    // ‚úÖ CORRECTION : Logique de calcul mise √† jour pour utiliser le % d'automatisation
    const handleRoiCalculate = (e: React.FormEvent) => {
        e.preventDefault();
        
        let totalWeeklyHours = 0;
        let totalAnnualCost = 0;
        let isValid = true;

        if (roiTasks.length === 0) {
            setGeneratedPlan(`# üö´ Aucune T√¢che\n\nVeuillez ajouter au moins une t√¢che √† analyser.`);
            return;
        }

        roiTasks.forEach(task => {
            const numEmployees = parseFloat(task.employees);
            const numHours = parseFloat(task.hoursPerWeek);
            const numCost = parseFloat(task.hourlyCost);

            if (isNaN(numEmployees) || isNaN(numHours) || isNaN(numCost) || numEmployees <= 0 || numHours <= 0 || numCost <= 0) {
                isValid = false;
            } else {
                totalWeeklyHours += numEmployees * numHours;
                totalAnnualCost += (numEmployees * numHours * numCost) * 52;
            }
        });
        
        const numAutomationPercentage = parseFloat(automationPercentage);
        if (isNaN(numAutomationPercentage) || numAutomationPercentage < 0 || numAutomationPercentage > 100) {
            isValid = false;
        }

        if (!isValid) {
            setGeneratedPlan(`# üö´ Donn√©es Invalides\n\nVeuillez v√©rifier que toutes les t√¢ches ont des valeurs num√©riques positives et que le pourcentage est valide.`);
            return;
        }

        const automationEfficiency = numAutomationPercentage / 100;
        const savedAnnualCost = totalAnnualCost * automationEfficiency;
        const costWithElsyvia = totalAnnualCost * (1 - automationEfficiency);

        // Scenarios
        const growthFactor = 1 + (parseFloat(scenarios.growth) / 100 || 0);
        const costIncreaseFactor = 1 + (parseFloat(scenarios.costIncrease) / 100 || 0);
        const projectedAnnualCost = totalAnnualCost * growthFactor * costIncreaseFactor;
        const projectedSavedCost = projectedAnnualCost * automationEfficiency;

        const formatCurrency = (value: number) => new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR', minimumFractionDigits: 0, maximumFractionDigits: 0 }).format(value);
        
        // Visualisation
        const totalBlocks = 20;
        const savedBlocks = Math.round(totalBlocks * automationEfficiency);
        const remainingBlocks = totalBlocks - savedBlocks;
        const costBar = 'üü•'.repeat(totalBlocks);
        const savedBar = 'üü©'.repeat(savedBlocks) + '‚¨úÔ∏è'.repeat(remainingBlocks);

        const resultText = `
# üìà R√©sultat du Calculateur de ROI Strat√©gique

En automatisant **${automationPercentage}%** des t√¢ches list√©es, voici le retour sur investissement que vous pourriez esp√©rer.

## üìä Visualisation du Gain Annuel

**Co√ªt Actuel (100% manuel) :** ${formatCurrency(totalAnnualCost)} / an
\`${costBar}\`

**Co√ªt R√©siduel (avec Elsyvia) :** ${formatCurrency(costWithElsyvia)} / an
\`${savedBar}\`
> Le "Co√ªt avec Elsyvia" repr√©sente le co√ªt des heures de travail qui n'ont pas pu √™tre automatis√©es. C'est votre co√ªt de fonctionnement optimis√©.

> **√âconomie Annuelle Nette Estim√©e :** **${formatCurrency(savedAnnualCost)}**

## üîÆ Projection √† 1 An (Sc√©narios)

En consid√©rant une croissance de **${scenarios.growth || 0}%** de l'√©quipe et **${scenarios.costIncrease || 0}%** d'augmentation des co√ªts :

- **Co√ªt Annuel Projet√© (sans IA) :** ${formatCurrency(projectedAnnualCost)}
- **√âconomie Annuelle Projet√©e (avec IA) :** **${formatCurrency(projectedSavedCost)}**

> L'automatisation est un investissement qui s'adapte √† votre croissance et s√©curise vos marges futures.

---
## üöÄ Prochaine √âtape
Ces chiffres sont une estimation. Pour un plan d'action chiffr√© et adapt√© √† VOS processus, contactez Elsyvia pour un diagnostic personnalis√©.
`;
        setGeneratedPlan(resultText);
    };


    const exportToHtml = () => {
        if (!generatedPlan) return;
        
        setIsExporting(true);
        
        try {
            let htmlContent = generatedPlan
                .replace(/(> \*\*Solution Elsyvia\s?:\*\*[\s\S]*?)(?=\n\n\*\*|\n---|\n\n##|$)/g, (match) => {
                    const content = match.substring(1).trim();
                    return `<div class="solution">${content}</div>`;
                })
                .replace(/^> (.*$)/gm, '<div class="solution">$1</div>')
                .replace(/^`([^`]+)`$/gm, '<div class="code-block">$1</div>')
                .replace(/^### (.*$)/gm, '<h3>$1</h3>')
                .replace(/^## (.*$)/gm, '<h2>$1</h2>')
                .replace(/^# (.*$)/gm, '<h1>$1</h1>')
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/^- (.*$)/gm, '<li>$1</li>')
                .replace(/^---$/gm, '<hr>')
                .replace(/\n\n/g, '</p><p>')
                .replace(/\n/g, '<br>');

            htmlContent = htmlContent
                .replace(/(<li>.*?<\/li>)/gs, '<ul>$1</ul>')
                .replace(/<\/ul>\s*<ul>/g, '');

            htmlContent = htmlContent
                .replace(/<p><(h[1-3]|ul|hr|div)>/g, '<$1>')
                .replace(/<\/(h[1-3]|ul|hr|div)><\/p>/g, '</$1>');
            
            htmlContent = htmlContent.replace(/(<div class="solution">)<br>/g, '$1');
            htmlContent = htmlContent.replace(/<p><\/p>/g, '');

            if (!htmlContent.startsWith('<p>') && !htmlContent.startsWith('<h') && !htmlContent.startsWith('<ul') && !htmlContent.startsWith('<div')) {
                htmlContent = '<p>' + htmlContent + '</p>';
            }

            const fullHtmlContent = `<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rapport ElsyvIA - ${new Date().toLocaleDateString('fr-FR')}</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 40px 20px; color: #333; background-color: #ffffff; }
        h1 { color: #1f2937; border-bottom: 3px solid #3b82f6; padding-bottom: 10px; margin-top: 2rem; margin-bottom: 1.5rem; font-size: 2rem; }
        h2 { color: #374151; margin-top: 2.5rem; margin-bottom: 1.5rem; font-size: 1.5rem; border-left: 4px solid #10b981; padding-left: 15px; }
        h3 { color: #4b5563; margin-top: 2rem; margin-bottom: 1rem; font-size: 1.25rem; }
        p { margin-bottom: 1.5rem; text-align: justify; }
        ul { margin-bottom: 1.5rem; padding-left: 2rem; }
        li { margin-bottom: 0.75rem; line-height: 1.7; }
        strong { color: #1f2937; font-weight: 600; }
        .solution { background-color: #eff6ff; border-left: 5px solid #3b82f6; padding: 1.25rem; margin: 1.5rem 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.05); }
        .solution strong { color: #1e40af; display: block; margin-bottom: 0.75rem; }
        .solution p:first-child { margin-top: 0; }
        .solution p:last-child { margin-bottom: 0; }
        .code-block { background-color: #f3f4f6; padding: 10px; border-radius: 5px; font-family: monospace; white-space: pre; }
        hr { margin: 2.5rem 0; border: none; height: 2px; background: linear-gradient(90deg, #3b82f6, #10b981); }
        .header { text-align: center; margin-bottom: 3rem; padding-bottom: 2rem; border-bottom: 1px solid #e5e7eb; }
        .footer { margin-top: 3rem; padding-top: 2rem; border-top: 1px solid #e5e7eb; text-align: center; color: #6b7280; font-size: 0.9rem; }
        .logo { font-size: 1.5rem; font-weight: bold; color: #3b82f6; margin-bottom: 0.5rem; }
        @media print { body { margin: 0; padding: 20px; } }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">ElsyvIA</div>
        <p>Rapport g√©n√©r√© le ${new Date().toLocaleDateString('fr-FR')} √† ${new Date().toLocaleTimeString('fr-FR')}</p>
    </div>
    <div class="content">${htmlContent}</div>
    <div class="footer">
        <p><strong>ElsyvIA</strong> - Solutions IA pour entreprises<br>
        Ce rapport a √©t√© g√©n√©r√© automatiquement par notre assistant IA.</p>
    </div>
</body>
</html>`;

            const blob = new Blob([fullHtmlContent], { type: 'text/html;charset=utf-8' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            
            const isAudit = generatedPlan.includes('Audit Flash');
            const isRoi = generatedPlan.includes('Calculateur de ROI');
            
            let fileName = `Rapport_Elsyvia_${new Date().toISOString().split('T')[0]}.html`;
            if (isAudit) {
                fileName = `Audit_Flash_IA_${new Date().toISOString().split('T')[0]}.html`;
            } else if (isRoi) {
                fileName = `Calcul_ROI_IA_${new Date().toISOString().split('T')[0]}.html`;
            } else {
                fileName = `Plan_Strategique_IA_${new Date().toISOString().split('T')[0]}.html`;
            }
                
            a.download = fileName;
            a.style.display = 'none';
            
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            console.log('‚úÖ Export HTML r√©alis√© avec succ√®s');
            
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'export HTML:', error);
            alert('Une erreur est survenue lors de l\'export. Veuillez r√©essayer.');
        } finally {
            setIsExporting(false);
        }
    };

    if (!isLoggedIn) {
        return (
            <>
                <Helmet>
                    <title>Acc√®s D√©mo | ElsyvIA</title>
                    <meta name="robots" content="noindex, nofollow" />
                </Helmet>
                <div className="min-h-screen flex items-center justify-center bg-gray-100 pt-20">
                    <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
                        <div className="text-center mb-8">
                            <h1 className="text-2xl font-bold text-gray-900 mb-2">Acc√®s D√©monstration</h1>
                            <p className="text-gray-600">Entrez votre jeton d'acc√®s pour continuer</p>
                        </div>
                        
                        <form onSubmit={handleLogin} className="space-y-6">
                            <div>
                                <label htmlFor="token" className="block text-sm font-medium text-gray-700 mb-2">
                                    Jeton d'Acc√®s
                                </label>
                                <input
                                    type="password"
                                    id="token"
                                    value={token}
                                    onChange={(e) => setToken(e.target.value)}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                    placeholder="Entrez votre jeton..."
                                    required
                                />
                            </div>
                            
                            {loginError && (
                                <div className="text-red-600 text-sm bg-red-50 p-3 rounded-md">
                                    {loginError}
                                </div>
                            )}
                            
                            <button
                                type="submit"
                                className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
                            >
                                Acc√©der √† la d√©monstration
                            </button>
                        </form>
                    </div>
                </div>
            </>
        );
    }
    
    return (
        <>
            <Helmet>
                <title>D√©monstration | ElsyvIA</title>
                <meta name="robots" content="noindex, nofollow" />
            </Helmet>
            
            <div className="container mx-auto px-4 py-12 pt-28">
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-4xl font-bold text-gray-900">Espace D√©monstration</h1>
                    <button onClick={handleLogout} className="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors flex items-center gap-2">
                        <LogOut className="w-4 h-4" />
                        <span>D√©connexion</span>
                    </button>
                </div>
                
                <div className="space-y-10">
                    {/* Section Auditeur de Site Web */}
                    <div className="bg-gray-50 rounded-2xl p-8 shadow-xl">
                        <div className="flex items-center gap-3 mb-4">
                            <Search className="w-8 h-8 text-indigo-600" />
                            <h2 className="text-2xl font-bold text-gray-900">üîé Auditeur de Site Web IA</h2>
                        </div>
                        <p className="text-gray-600 mb-4">
                            Entrez l'URL de votre site pour obtenir un audit bas√© sur les bonnes pratiques de votre secteur 
                            et d√©couvrir des opportunit√©s d'automatisation IA personnalis√©es.
                        </p>
                        
                        <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                            <p className="text-blue-800 text-sm">
                                <strong>üí° M√©thode :</strong> Notre IA analyse votre secteur d'activit√© pour identifier 
                                les opportunit√©s d'optimisation courantes. Pour un audit d√©taill√© de votre site, 
                                contactez-nous pour un rendez-vous personnalis√©.
                            </p>
                        </div>
                        
                        <form onSubmit={handleAuditWebsite} className="flex gap-4">
                            <input
                                type="text"
                                value={websiteUrl}
                                onChange={(e) => setWebsiteUrl(e.target.value)}
                                placeholder="Exemple : www.mon-entreprise.com"
                                className="flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                                disabled={isGenerating}
                                required
                            />
                            <button
                                type="submit"
                                disabled={isGenerating || !websiteUrl.trim()}
                                className="bg-indigo-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-indigo-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                            >
                                {isGenerating ? (
                                    <>
                                        <span className="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
                                        Analyse...
                                    </>
                                ) : (
                                    'üöÄ Lancer l\'audit IA'
                                )}
                            </button>
                        </form>
                    </div>

                    {/* ‚úÖ CORRECTION : Section du Calculateur de ROI enti√®rement revue pour √™tre plus p√©dagogique */}
                    <div className="bg-gray-50 rounded-2xl p-8 shadow-xl">
                        <div className="flex items-center gap-3 mb-4">
                            <TrendingUp className="w-8 h-8 text-green-600" />
                            <h2 className="text-2xl font-bold text-gray-900">üìà Calculateur de ROI Strat√©gique</h2>
                        </div>
                        <p className="text-gray-600 mb-2">
                            Cet outil vous aide √† visualiser l'impact financier de l'automatisation. En quantifiant le temps pass√© sur des t√¢ches r√©p√©titives, vous pouvez d√©couvrir les √©conomies potentielles et prendre des d√©cisions √©clair√©es.
                        </p>
                        <p className="text-xs text-gray-500 mb-6">
                            Le ROI (Retour sur Investissement) n'est pas qu'un chiffre, c'est le temps que vous regagnez pour vous concentrer sur ce qui compte vraiment : votre croissance.
                        </p>
                        
                        <div className="space-y-4 mb-6">
                            {roiTasks.map((task) => (
                                <div key={task.id} className="grid grid-cols-1 md:grid-cols-12 gap-3 p-4 bg-white rounded-lg border">
                                    <div className="md:col-span-4">
                                        <label htmlFor={`taskName-${task.id}`} className="block text-sm font-medium text-gray-700 mb-1">Nom de la t√¢che</label>
                                        <p className="text-xs text-gray-500 mb-2">Quelle t√¢che souhaitez-vous analyser ?</p>
                                        <input
                                            type="text"
                                            id={`taskName-${task.id}`}
                                            value={task.name}
                                            onChange={(e) => handleRoiTaskChange(task.id, 'name', e.target.value)}
                                            placeholder="Ex: Gestion des factures"
                                            className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm"
                                        />
                                    </div>
                                    <div className="md:col-span-2">
                                        <label htmlFor={`employees-${task.id}`} className="block text-sm font-medium text-gray-700 mb-1">Employ√©s</label>
                                         <p className="text-xs text-gray-500 mb-2">Combien de personnes ?</p>
                                        <input
                                            type="number"
                                            id={`employees-${task.id}`}
                                            value={task.employees}
                                            onChange={(e) => handleRoiTaskChange(task.id, 'employees', e.target.value)}
                                            placeholder="Ex: 5"
                                            className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm"
                                        />
                                    </div>
                                    <div className="md:col-span-2">
                                        <label htmlFor={`hours-${task.id}`} className="block text-sm font-medium text-gray-700 mb-1">Heures/sem</label>
                                        <p className="text-xs text-gray-500 mb-2">Temps pass√© par employ√©.</p>
                                        <input
                                            type="number"
                                            id={`hours-${task.id}`}
                                            value={task.hoursPerWeek}
                                            onChange={(e) => handleRoiTaskChange(task.id, 'hoursPerWeek', e.target.value)}
                                            placeholder="Ex: 4"
                                            className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm"
                                        />
                                    </div>
                                    <div className="md:col-span-3">
                                        <label htmlFor={`cost-${task.id}`} className="block text-sm font-medium text-gray-700 mb-1">Co√ªt horaire (‚Ç¨)</label>
                                        <p className="text-xs text-gray-500 mb-2">Salaire brut + charges.</p>
                                        <input
                                            type="number"
                                            id={`cost-${task.id}`}
                                            value={task.hourlyCost}
                                            onChange={(e) => handleRoiTaskChange(task.id, 'hourlyCost', e.target.value)}
                                            placeholder="Ex: 25"
                                            className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm"
                                        />
                                    </div>
                                    <div className="md:col-span-1 flex items-end">
                                        <button onClick={() => removeRoiTask(task.id)} className="p-2 text-red-500 hover:bg-red-100 rounded-full transition-colors">
                                            <Trash2 className="w-5 h-5" />
                                        </button>
                                    </div>
                                </div>
                            ))}
                        </div>
                        
                        <button onClick={addRoiTask} className="flex items-center gap-2 text-sm text-green-700 font-medium mb-8">
                            <PlusCircle className="w-5 h-5" />
                            Ajouter une autre t√¢che √† analyser
                        </button>
                        
                        {auditSuggestion && (
                             <div className="p-4 mb-6 bg-indigo-50 border border-indigo-200 rounded-lg flex items-center justify-between">
                                 <p className="text-sm text-indigo-800">
                                     üí° **Suggestion d'apr√®s votre audit :** Et si vous calculiez le ROI pour la t√¢che **"{auditSuggestion}"** ?
                                 </p>
                                 <button onClick={addSuggestedTask} className="bg-indigo-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-indigo-700">
                                     Ajouter au calcul
                                 </button>
                             </div>
                        )}

                        <div className="border-t pt-6">
                             <h3 className="text-lg font-bold text-gray-800 mb-2">‚öôÔ∏è Param√®tres de Simulation</h3>
                             <p className="text-gray-600 mb-4">Ajustez ces valeurs pour affiner l'estimation.</p>
                             <div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
                                 <div className="md:col-span-1">
                                     <label htmlFor="automationPercentage" className="block text-sm font-medium text-gray-700 mb-1">Potentiel d'automatisation (%)</label>
                                     <p className="text-xs text-gray-500 mb-2">Quel % de ces t√¢ches peut √™tre automatis√© ? (80% est une moyenne constat√©e)</p>
                                     <input
                                         type="number"
                                         name="automationPercentage"
                                         id="automationPercentage"
                                         value={automationPercentage}
                                         onChange={(e) => setAutomationPercentage(e.target.value)}
                                         className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                                     />
                                 </div>
                                 <div className="md:col-span-1">
                                     <label htmlFor="growth" className="block text-sm font-medium text-gray-700 mb-1">Croissance future de l'√©quipe (%)</label>
                                      <p className="text-xs text-gray-500 mb-2">Anticipez l'√©volution de vos effectifs.</p>
                                     <input
                                         type="number"
                                         name="growth"
                                         id="growth"
                                         value={scenarios.growth}
                                         onChange={handleScenarioChange}
                                         placeholder="Ex: 10"
                                         className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                                     />
                                 </div>
                                 <div className="md:col-span-1">
                                     <label htmlFor="costIncrease" className="block text-sm font-medium text-gray-700 mb-1">Augmentation future des co√ªts (%)</label>
                                     <p className="text-xs text-gray-500 mb-2">Anticipez l'inflation ou les augmentations.</p>
                                     <input
                                         type="number"
                                         name="costIncrease"
                                         id="costIncrease"
                                         value={scenarios.costIncrease}
                                         onChange={handleScenarioChange}
                                         placeholder="Ex: 5"
                                         className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                                     />
                                 </div>
                             </div>
                             <button
                                 onClick={handleRoiCalculate}
                                 className="mt-6 w-full bg-green-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-green-700 transition-colors"
                             >
                                 ‚ú® Calculer mon ROI Strat√©gique
                             </button>
                        </div>
                    </div>


                    {/* Section G√©n√©rateur de Plan Strat√©gique */}
                    <div className="bg-gray-50 rounded-2xl p-8 shadow-xl">
                        <div className="flex items-center gap-3 mb-4">
                            <FileText className="w-8 h-8 text-teal-600" />
                            <h2 className="text-2xl font-bold text-gray-900">üìù G√©n√©rateur de Plan Strat√©gique IA</h2>
                        </div>
                        <p className="text-gray-600 mb-4">
                            D√©crivez-nous votre probl√©matique m√©tier et obtenez instantan√©ment un plan d'action personnalis√© et d√©taill√©.
                        </p>
                        
                        <div className="mb-6 p-4 bg-amber-50 border border-amber-200 rounded-lg">
                            <p className="text-amber-800 text-sm">
                                <strong>‚ö†Ô∏è Usage Strictement Professionnel :</strong> Cette IA est sp√©cialis√©e uniquement dans les solutions business.
                            </p>
                        </div>
                        
                        <form onSubmit={handleGeneratePlan} className="flex gap-4 mb-8">
                            <input
                                type="text"
                                value={userObjective}
                                onChange={(e) => setUserObjective(e.target.value)}
                                placeholder="Exemple : 'Comment cr√©er un chatbot intelligent pour mon site e-commerce ?'"
                                className="flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                                disabled={isGenerating}
                            />
                            <button
                                type="submit"
                                disabled={isGenerating || !userObjective.trim()}
                                className="bg-teal-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-teal-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                            >
                                {isGenerating ? (
                                    <>
                                        <span className="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
                                        G√©n√©ration...
                                    </>
                                ) : (
                                    '‚ú® G√©n√©rer le plan'
                                )}
                            </button>
                        </form>
                        
                        <div className="mb-6">
                            <p className="text-sm text-gray-500 mb-2">üí° Suggestions (cliquez pour g√©n√©rer automatiquement) :</p>
                            <div className="flex flex-wrap gap-2">
                                {[
                                    "Cr√©er un chatbot intelligent pour mon site e-commerce",
                                    "Automatiser ma gestion des devis et factures", 
                                    "Optimiser ma relation client avec l'IA conversationnelle",
                                    "Mettre en place un syst√®me de recommandations produits",
                                    "Automatiser le tri et traitement de mes emails clients",
                                    "Cr√©er un assistant IA pour ma comptabilit√©"
                                ].map((suggestion, index) => (
                                    <button
                                        key={index}
                                        onClick={() => handleSuggestionClick(suggestion)}
                                        className="suggestion-button text-xs bg-white border border-gray-300 px-3 py-1 rounded-full"
                                        disabled={isGenerating}
                                    >
                                        {suggestion}
                                    </button>
                                ))}
                            </div>
                        </div>
                    </div>
                    
                    {/* Section R√©sultat avec titre dynamique am√©lior√© */}
                    {generatedPlan && (
                        <div className="bg-white p-8 rounded-lg border shadow-sm animate-fade-in">
                            <div className="flex justify-between items-center mb-6">
                                <h3 className="text-xl font-semibold text-gray-900 flex items-center gap-2">
                                    {generatedPlan.includes('Audit Flash') ? (
                                        <>
                                            <Search className="w-6 h-6 text-indigo-600" />
                                            Votre Audit Flash IA
                                        </>
                                    ) : generatedPlan.includes('Calculateur de ROI') ? (
                                        <>
                                            <TrendingUp className="w-6 h-6 text-green-600" />
                                            Votre ROI Strat√©gique
                                        </>
                                    ) : (
                                        <>
                                            <FileText className="w-6 h-6 text-teal-600" />
                                            Votre Plan Strat√©gique IA
                                        </>
                                    )}
                                </h3>
                                <button
                                    onClick={exportToHtml}
                                    disabled={isExporting || isGenerating}
                                    className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2 disabled:opacity-50"
                                >
                                    {isExporting ? (
                                        <span className="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white"></span>
                                    ) : (
                                        <Download className="w-4 h-4" />
                                    )}
                                    Exporter HTML
                                </button>
                            </div>
                            <div className="border-t pt-6">
                                <div className="demo-plan-content">
                                    <ReactMarkdown>
                                        {generatedPlan}
                                    </ReactMarkdown>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            </div>
            
            <style jsx global>{`
                .demo-plan-content h1 {
                    color: #1f2937;
                    border-bottom: 3px solid #3b82f6;
                    padding-bottom: 10px;
                    margin-top: 1rem;
                    margin-bottom: 1.5rem;
                    font-size: 1.75rem;
                }
                .demo-plan-content h2 {
                    color: #374151;
                    margin-top: 2.5rem;
                    margin-bottom: 1.5rem;
                    font-size: 1.5rem;
                    border-left: 4px solid #10b981;
                    padding-left: 15px;
                }
                .demo-plan-content h3 {
                    color: #4b5563;
                    margin-top: 2rem;
                    margin-bottom: 1rem;
                    font-size: 1.25rem;
                }
                .demo-plan-content p {
                    margin-bottom: 1.5rem;
                    line-height: 1.7;
                }
                .demo-plan-content ul {
                    margin-bottom: 1.5rem;
                    padding-left: 2rem;
                }
                .demo-plan-content li {
                    margin-bottom: 0.75rem;
                    line-height: 1.7;
                }
                .demo-plan-content strong {
                    color: #1f2937;
                    font-weight: 600;
                }
                .demo-plan-content hr {
                    margin: 2.5rem 0;
                    border: none;
                    height: 2px;
                    background: linear-gradient(90deg, #3b82f6, #10b981);
                }
                .demo-plan-content blockquote {
                    background-color: #eff6ff;
                    border-left: 5px solid #3b82f6;
                    padding: 1rem 1.25rem;
                    margin: 1.5rem 0;
                    border-radius: 8px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
                }
                .demo-plan-content blockquote p {
                    margin-bottom: 0;
                }
                .demo-plan-content blockquote strong {
                    color: #1e40af;
                    display: block;
                    margin-bottom: 0.75rem;
                }
                /* Style pour la visualisation du ROI */
                .demo-plan-content code {
                    background-color: #f3f4f6;
                    padding: 10px;
                    border-radius: 5px;
                    font-family: monospace;
                    white-space: pre;
                    display: block;
                    letter-spacing: 2px; /* Espacer les emojis */
                }
                .animate-fade-in {
                    animation: fadeIn 0.5s ease-in-out;
                }
                @keyframes fadeIn {
                    from { opacity: 0; transform: translateY(20px); }
                    to { opacity: 1; transform: translateY(0); }
                }
                .suggestion-button:hover {
                    background-color: #f3f4f6;
                    border-color: #9ca3af;
                    cursor: pointer;
                }
                .suggestion-button:disabled {
                    cursor: not-allowed;
                    opacity: 0.6;
                }
            `}</style>
        </>
    );
};

export default ProspectDemoPage;
