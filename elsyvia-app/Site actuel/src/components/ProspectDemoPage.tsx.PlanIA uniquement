import React, { useState, useEffect } from 'react';
import { Helmet } from 'react-helmet-async';
import { LogOut, Download, FileText } from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import axios from 'axios';
// ‚úÖ CORRECTION : Import du config centralis√© comme dans Chatbot.tsx
import config from '/src/config';

// IMPORTANT : Le jeton d'acc√®s reste le m√™me
const CORRECT_TOKEN = 'Elsyv1Acgenial2025!';

const ProspectDemoPage: React.FC = () => {
    const [token, setToken] = useState('');
    const [isLoggedIn, setIsLoggedIn] = useState(false);
    const [loginError, setLoginError] = useState('');
    
    // Nouveaux √©tats pour la d√©mo
    const [userObjective, setUserObjective] = useState('');
    const [generatedPlan, setGeneratedPlan] = useState('');
    const [isGenerating, setIsGenerating] = useState(false);
    const [isExporting, setIsExporting] = useState(false);

    useEffect(() => {
        const storedToken = sessionStorage.getItem('elsyvia_demo_token');
        if (storedToken === CORRECT_TOKEN) {
            setToken(storedToken);
            setIsLoggedIn(true);
        }
    }, []);

    const handleLogin = (e: React.FormEvent) => {
        e.preventDefault();
        setLoginError('');
        if (token === CORRECT_TOKEN) {
            sessionStorage.setItem('elsyvia_demo_token', token);
            setIsLoggedIn(true);
        } else {
            setLoginError('Jeton d\'acc√®s incorrect.');
        }
    };

    const handleLogout = () => {
        sessionStorage.removeItem('elsyvia_demo_token');
        setIsLoggedIn(false);
        setToken('');
    };

    // ‚úÖ CORRECTION : Fonction API similaire √† celle du chatbot
    const callGeminiAPI = async (prompt: string) => {
        try {
            // Utilisation de la configuration centralis√©e comme dans Chatbot.tsx
            const GEMINI_API_KEY = config.geminiApiKey;
            
            if (!GEMINI_API_KEY || GEMINI_API_KEY === 'VOTRE_CLE_API_ICI') {
                throw new Error('Configuration API manquante');
            }

            const contents = [
                {
                    role: 'user',
                    parts: [{
                        text: `CONTEXTE:
Ton nom est Elsy. Tu es une consultante IA de haut niveau et experte pour la soci√©t√© Elsyvia.
Ton r√¥le est de fournir des plans d'action strat√©giques, CONCRETS et pragmatiques.

STYLE ET FORMAT:
- STRUCTURE tes r√©ponses avec des sauts de ligne, des listes √† puces (*) et des paragraphes clairs pour une lisibilit√© maximale.
- Utilise les titres en gras (**) pour mettre en √©vidence les sujets.
- Utilise la syntaxe Markdown pour le formatage.
- Commence par un titre en gras **Plan d'action ElsyvIA**.
- R√©dige une phrase d'introduction qui reformule le probl√®me et montre que tu as compris.
- Propose un plan en 3 √©tapes concr√®tes, chacune avec un titre en gras et une br√®ve description.
- Utilise des puces (-) pour lister les points.
- Termine par une phrase qui met en avant la valeur ajout√©e d'un accompagnement par Elsyvia.
- N'invente pas d'informations, base-toi sur tes connaissances des services d'Elsyvia (automatisation, chatbots, conseil, formation).

PROBL√âMATIQUE √Ä TRAITER:
${prompt}`
                    }]
                },
                {
                    role: 'model',
                    parts: [{ text: 'Entendu. Je suis pr√™te √† g√©n√©rer un plan d\'action strat√©gique adapt√© avec un formatage optimal.' }]
                },
                {
                    role: 'user',
                    parts: [{ text: `G√©n√®re maintenant le plan d'action pour: ${prompt}` }]
                }
            ];

            console.log('üîç Envoi vers Gemini API...');

            const response = await fetch(
                `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${GEMINI_API_KEY}`,
                {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        contents: contents,
                        generationConfig: {
                            temperature: 0.7,
                            topK: 40,
                            topP: 0.95,
                            maxOutputTokens: 1024
                        }
                    })
                }
            );

            if (!response.ok) {
                const errorData = await response.text();
                console.error('‚ùå Erreur API Gemini:', response.status, errorData);
                
                if (response.status === 400) {
                    throw new Error('Format de requ√™te invalide');
                } else if (response.status === 403) {
                    throw new Error('Cl√© API invalide ou quota d√©pass√©');
                } else if (response.status === 429) {
                    throw new Error('Limite de taux atteinte');
                }
                
                throw new Error(`Erreur API: ${response.status}`);
            }

            const data = await response.json();
            console.log('‚úÖ R√©ponse re√ßue de l\'API');

            if (data.candidates && data.candidates[0] && data.candidates[0].content) {
                return data.candidates[0].content.parts[0].text;
            } else {
                console.error('‚ùå Structure de r√©ponse inattendue:', data);
                throw new Error('R√©ponse invalide de l\'API');
            }

        } catch (error) {
            console.error('‚ùå Erreur lors de l\'appel √† Gemini:', error);
            throw error;
        }
    };
    
    const handleGeneratePlan = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!userObjective.trim() || isGenerating) return;

        setIsGenerating(true);
        setGeneratedPlan('');
        
        try {
            console.log('üöÄ G√©n√©ration du plan pour:', userObjective);
            const botResponse = await callGeminiAPI(userObjective.trim());
            setGeneratedPlan(botResponse);
            console.log('‚úÖ Plan g√©n√©r√© avec succ√®s');

        } catch (error) {
            console.error("‚ùå Erreur lors de la g√©n√©ration du plan :", error);
            
            let errorMessage = "Une erreur technique est survenue.";
            
            if (error instanceof Error) {
                if (error.message.includes('Configuration API manquante')) {
                    errorMessage = "Configuration API manquante.\n\nVeuillez contacter l'administrateur.";
                } else if (error.message.includes('400')) {
                    errorMessage = "Format de requ√™te invalide.";
                } else if (error.message.includes('403')) {
                    errorMessage = "Probl√®me d'authentification API.\n\nV√©rifiez votre configuration.";
                } else if (error.message.includes('429')) {
                    errorMessage = "Limite de requ√™tes atteinte.\n\nVeuillez patienter un moment.";
                } else if (error.message.includes('Failed to fetch')) {
                    errorMessage = "Probl√®me de connexion r√©seau.";
                }
            }
            
            setGeneratedPlan(`# ‚ùå Erreur Technique

${errorMessage}

## üîß Solutions Possibles

- **V√©rifiez votre connexion internet** et r√©essayez
- **Patientez quelques instants** puis relancez la g√©n√©ration  
- **Simplifiez votre demande** si elle √©tait tr√®s complexe

## üìû Support Direct

Notre √©quipe technique reste disponible pour vous accompagner :

**Email :** contact@elsyvia.com  
**R√©ponse garantie :** sous 24h

---

*Nous nous excusons pour ce d√©sagr√©ment temporaire.*`);
        } finally {
            setIsGenerating(false);
        }
    };
    
    const exportToHtml = () => {
        if (!generatedPlan) return;
        
        setIsExporting(true);
        
        try {
            const htmlContent = `
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="UTF-8">
                    <title>Plan Strat√©gique IA - ElsyvIA</title>
                    <style>
                        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 40px 20px;}
                        .header { text-align: center; border-bottom: 3px solid #0d9488; padding-bottom: 20px; margin-bottom: 30px; }
                        .header h1 { color: #0d9488; margin: 0; font-size: 28px; }
                        .header p { color: #666; margin: 10px 0 0 0; font-size: 14px; }
                        .content { font-size: 14px; }
                        .content h2 { color: #0d9488; border-left: 4px solid #0d9488; padding-left: 15px; margin-top: 25px; margin-bottom: 15px; }
                        .content h3 { color: #1f2937; margin-top: 20px; margin-bottom: 10px; }
                        .content ul { margin: 10px 0; padding-left: 20px; }
                        .content li { margin-bottom: 8px; }
                        .content p { margin-bottom: 12px; text-align: justify; }
                        .footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center; color: #666; font-size: 12px; }
                    </style>
                </head>
                <body>
                    <div class="header">
                        <h1>Plan Strat√©gique IA</h1>
                        <p>G√©n√©r√© par ElsyvIA ‚Ä¢ ${new Date().toLocaleDateString('fr-FR', { day: 'numeric', month: 'long', year: 'numeric' })}</p>
                        <p><strong>Probl√©matique :</strong> ${userObjective}</p>
                    </div>
                    <div class="content">
                        ${generatedPlan.replace(/\n/g, '<br>')}
                    </div>
                    <div class="footer">
                        <p><strong>ElsyvIA</strong> - Solutions IA pour entreprises</p>
                        <p>Contact : contact@elsyvia.com | www.elsyvia.com</p>
                        <p>Ce document a √©t√© g√©n√©r√© automatiquement par notre IA consultant</p>
                    </div>
                </body>
                </html>
            `;

            const blob = new Blob([htmlContent], { type: 'text/html' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `Plan_Strategique_IA_${new Date().toISOString().split('T')[0]}.html`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
        } catch (error) {
            console.error('Erreur lors de l\'export:', error);
        } finally {
            setIsExporting(false);
        }
    };

    if (!isLoggedIn) {
        return (
            <>
                <Helmet>
                    <title>Acc√®s D√©mo | ElsyvIA</title>
                    <meta name="robots" content="noindex, nofollow" />
                </Helmet>
                <div className="min-h-screen flex items-center justify-center bg-gray-100 pt-20">
                    <form onSubmit={handleLogin} className="bg-white p-8 rounded-lg shadow-md w-full max-w-sm">
                        <h1 className="text-2xl font-bold mb-6 text-center">Acc√®s Espace D√©mo</h1>
                        <div className="mb-4">
                            <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="token">Jeton d'acc√®s</label>
                            <input
                                id="token"
                                type="password"
                                value={token}
                                onChange={(e) => setToken(e.target.value)}
                                className="w-full px-4 py-2 border rounded-lg"
                                placeholder="Entrez votre jeton secret"
                                required
                            />
                        </div>
                        {loginError && <p className="text-red-500 text-sm mb-4 text-center">{loginError}</p>}
                        <button type="submit" className="w-full bg-teal-600 text-white py-2 rounded-lg hover:bg-teal-700">Acc√©der √† la d√©mo</button>
                    </form>
                </div>
            </>
        );
    }
    
    return (
        <>
            <Helmet>
                <title>D√©monstration | ElsyvIA</title>
                <meta name="robots" content="noindex, nofollow" />
            </Helmet>
            
            <style>{`
                /* CSS Global pour le plan g√©n√©r√© */
                .demo-plan-content {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    line-height: 1.8;
                    font-size: 15px;
                    color: #333;
                }
                
                .demo-plan-content h1 { 
                    color: #0d9488 !important; 
                    font-size: 2rem !important; 
                    margin: 2rem 0 1.5rem 0 !important; 
                    border-bottom: 3px solid #0d9488 !important; 
                    padding-bottom: 0.8rem !important; 
                    font-weight: 700 !important;
                    display: block !important;
                }
                
                .demo-plan-content h2 { 
                    color: #0d9488 !important; 
                    font-size: 1.4rem !important; 
                    margin: 2rem 0 1rem 0 !important; 
                    border-left: 4px solid #0d9488 !important; 
                    padding-left: 1rem !important; 
                    font-weight: 600 !important;
                    display: block !important;
                }
                
                .demo-plan-content h3 { 
                    color: #1f2937 !important; 
                    font-size: 1.2rem !important; 
                    margin: 1.5rem 0 0.8rem 0 !important; 
                    font-weight: 600 !important;
                    display: block !important;
                }
                
                .demo-plan-content p { 
                    margin-bottom: 1.2rem !important; 
                    text-align: justify !important; 
                    line-height: 1.7 !important;
                    display: block !important;
                }
                
                .demo-plan-content ul { 
                    margin: 1.2rem 0 !important; 
                    padding-left: 1.5rem !important; 
                }
                
                .demo-plan-content li { 
                    margin-bottom: 0.8rem !important; 
                    line-height: 1.6 !important; 
                }
                
                .demo-plan-content strong { 
                    color: #1f2937 !important; 
                    font-weight: 700 !important; 
                }
                
                .demo-plan-content hr { 
                    margin: 2.5rem 0 !important; 
                    border-color: #e5e7eb !important; 
                    border-width: 1px !important;
                }
                
                .demo-plan-content em { 
                    font-style: italic !important; 
                    color: #6b7280 !important; 
                }
                
                /* Espacement entre les √©l√©ments */
                .demo-plan-content h2 + p {
                    margin-top: 0.8rem !important;
                }
                
                .demo-plan-content h3 + p {
                    margin-top: 0.6rem !important;
                }
                
                .demo-plan-content p + h2,
                .demo-plan-content p + h3 {
                    margin-top: 2rem !important;
                }
            `}</style>
            
            <div className="container mx-auto px-4 py-12 pt-28">
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-4xl font-bold text-gray-900">Espace D√©monstration</h1>
                    <button onClick={handleLogout} className="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors flex items-center gap-2">
                        <LogOut className="w-4 h-4" />
                        <span>D√©connexion</span>
                    </button>
                </div>
                
                <div className="bg-gray-50 rounded-2xl p-8 shadow-xl">
                    <div className="flex items-center gap-3 mb-4">
                        <FileText className="w-8 h-8 text-teal-600" />
                        <h2 className="text-2xl font-bold text-gray-900">üöÄ G√©n√©rateur de Plan Strat√©gique IA (d√©mo)</h2>
                    </div>
                    <p className="text-gray-600 mb-6">
                        D√©crivez-nous votre probl√©matique m√©tier et obtenez instantan√©ment un plan d'action personnalis√©, d√©taill√© et exportable en HTML.
                    </p>
                    
                    {/* ‚úÖ CORRECTION : Debug info pour v√©rifier la config */}
                    <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg text-sm">
                        <p className="text-blue-800">
                            <strong>üìä √âtat de la configuration:</strong> {config.geminiApiKey && config.geminiApiKey !== 'VOTRE_CLE_API_ICI' ? '‚úÖ API configur√©e' : '‚ùå API non configur√©e'}
                        </p>
                    </div>
                    
                    <form onSubmit={handleGeneratePlan} className="flex gap-4 mb-8">
                        <input
                            type="text"
                            value={userObjective}
                            onChange={(e) => setUserObjective(e.target.value)}
                            placeholder="Exemple : 'Comment cr√©er un chatbot intelligent pour mon site e-commerce ?'"
                            className="flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                            disabled={isGenerating}
                            required
                        />
                        <button
                            type="submit"
                            disabled={isGenerating || !userObjective.trim()}
                            className="bg-teal-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-teal-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            {isGenerating ? (
                                <>
                                    <span className="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
                                    G√©n√©ration...
                                </>
                            ) : (
                                '‚ú® G√©n√©rer le plan'
                            )}
                        </button>
                    </form>
                    
                    <div className="mb-6">
                        <p className="text-sm text-gray-500 mb-2">üí° Suggestions :</p>
                        <div className="flex flex-wrap gap-2">
                            {[
                                "Cr√©er un chatbot intelligent pour mon site e-commerce",
                                "Automatiser ma gestion des devis et factures", 
                                "Optimiser ma relation client avec l'IA conversationnelle",
                                "Mettre en place un syst√®me de recommandations produits",
                                "Automatiser le tri et traitement de mes emails clients",
                                "Cr√©er un assistant IA pour ma comptabilit√©"
                            ].map((suggestion, index) => (
                                <button
                                    key={index}
                                    onClick={() => setUserObjective(suggestion)}
                                    className="text-xs bg-white border border-gray-300 px-3 py-1 rounded-full hover:bg-gray-50 transition-colors"
                                    disabled={isGenerating}
                                >
                                    {suggestion}
                                </button>
                            ))}
                        </div>
                    </div>
                    
                    {generatedPlan && (
                        <div className="bg-white p-8 rounded-lg border shadow-sm animate-fade-in">
                            <div className="flex justify-between items-center mb-6">
                                <h3 className="text-xl font-semibold text-gray-900 flex items-center gap-2">
                                    <FileText className="w-6 h-6 text-teal-600" />
                                    Votre Plan Strat√©gique
                                </h3>
                                <button
                                    onClick={exportToHtml}
                                    disabled={isExporting}
                                    className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2 disabled:opacity-50"
                                >
                                    {isExporting ? (
                                        <>
                                            <span className="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white"></span>
                                            Export...
                                        </>
                                    ) : (
                                        <>
                                            <Download className="w-4 h-4" />
                                            Exporter HTML
                                        </>
                                    )}
                                </button>
                            </div>
                            <div className="border-t pt-6">
                                <div className="demo-plan-content">
                                    <ReactMarkdown>
                                        {generatedPlan}
                                    </ReactMarkdown>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            </div>
            
            <style>{`
                @keyframes fade-in { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
                .animate-fade-in { animation: fade-in 0.5s ease-out; }
            `}</style>
        </>
    );
};

export default ProspectDemoPage;
